

Unused terminals:

   VOID
   LONG
   ENUM
   ARROW
   DOUBLE
   EQ_TIMES
   CARET
   SHORT
   SIZEOF
   EQ_SHIFT_RIGHT
   DOUBLE_AMPERSAND
   UNSIGNED
   COLON
   UNION
   DOUBLE_PLUS
   SHIFT_LEFT
   DEFAULT
   EQ_CARET
   DOT
   CASE
   REGISTER
   PIPE
   SWITCH
   TILDE
   DOUBLE_PIPE
   EQ_DIV
   VOLATILE
   DO
   CONST
   EQ_PIPE
   EQ_AMPERSAND
   SIGNED
   GOTO
   EQ_SHIFT_LEFT
   DOUBLE_MINUS
   QUESTION
   TYPEDEF
   AUTO
   TIMES
   POUND
   STRUCT
   SHIFT_RIGHT
   FLOAT
   EQ_MODULO

Grammar

Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> type_specifier declarator compound_statement
Rule 6     function_definition -> STATIC type_specifier declarator compound_statement
Rule 7     declaration -> type_specifier declarator SEMICOLON
Rule 8     declaration -> EXTERN type_specifier declarator SEMICOLON
Rule 9     declaration_list_opt -> empty
Rule 10    declaration_list_opt -> declaration_list
Rule 11    declaration_list -> declaration
Rule 12    declaration_list -> declaration_list declaration
Rule 13    type_specifier -> INT
Rule 14    type_specifier -> CHAR
Rule 15    declarator -> direct_declarator
Rule 16    declarator -> ASTERISK declarator
Rule 17    direct_declarator -> ID
Rule 18    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 19    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 20    parameter_type_list -> parameter_list
Rule 21    parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 22    parameter_list -> parameter_declaration
Rule 23    parameter_list -> parameter_list COMMA parameter_declaration
Rule 24    parameter_declaration -> type_specifier declarator
Rule 25    compound_statement -> LBRACE declaration_list_opt statement_list RBRACE
Rule 26    compound_statement -> LBRACE declaration_list_opt RBRACE
Rule 27    expression_statement -> expression SEMICOLON
Rule 28    expression -> equality_expression
Rule 29    expression -> equality_expression ASSIGN expression
Rule 30    expression -> equality_expression EQ_PLUS expression
Rule 31    expression -> equality_expression EQ_MINUS expression
Rule 32    equality_expression -> relational_expression
Rule 33    equality_expression -> equality_expression EQ relational_expression
Rule 34    equality_expression -> equality_expression NOT_EQ relational_expression
Rule 35    relational_expression -> additive_expression
Rule 36    relational_expression -> relational_expression LESS additive_expression
Rule 37    relational_expression -> relational_expression GREATER additive_expression
Rule 38    relational_expression -> relational_expression LESS_EQ additive_expression
Rule 39    relational_expression -> relational_expression GREATER_EQ additive_expression
Rule 40    postfix_expression -> primary_expression
Rule 41    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 42    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 43    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 44    argument_expression_list -> expression
Rule 45    argument_expression_list -> argument_expression_list COMMA expression
Rule 46    unary_expression -> postfix_expression
Rule 47    unary_expression -> MINUS unary_expression
Rule 48    unary_expression -> EXCLAMATION unary_expression
Rule 49    unary_expression -> ASTERISK unary_expression
Rule 50    unary_expression -> AMPERSAND unary_expression
Rule 51    mult_expression -> unary_expression
Rule 52    mult_expression -> mult_expression ASTERISK unary_expression
Rule 53    mult_expression -> mult_expression DIV unary_expression
Rule 54    mult_expression -> mult_expression MODULO unary_expression
Rule 55    additive_expression -> mult_expression
Rule 56    additive_expression -> additive_expression PLUS mult_expression
Rule 57    additive_expression -> additive_expression MINUS mult_expression
Rule 58    primary_expression -> ID
Rule 59    primary_expression -> INUMBER
Rule 60    primary_expression -> FNUMBER
Rule 61    primary_expression -> CHARACTER
Rule 62    primary_expression -> string_literal
Rule 63    primary_expression -> LPAREN expression RPAREN
Rule 64    string_literal -> STRING
Rule 65    string_literal -> string_literal STRING
Rule 66    statement -> compound_statement
Rule 67    statement -> expression_statement
Rule 68    statement -> selection_statement
Rule 69    statement -> iteration_statement
Rule 70    statement -> jump_statement
Rule 71    jump_statement -> RETURN SEMICOLON
Rule 72    jump_statement -> RETURN expression SEMICOLON
Rule 73    jump_statement -> BREAK SEMICOLON
Rule 74    jump_statement -> CONTINUE SEMICOLON
Rule 75    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 76    iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 77    selection_statement -> IF LPAREN expression RPAREN statement
Rule 78    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 79    statement_list -> statement
Rule 80    statement_list -> statement_list statement
Rule 81    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 50
ARROW                : 
ASSIGN               : 29
ASTERISK             : 16 49 52
AUTO                 : 
BREAK                : 73
CARET                : 
CASE                 : 
CHAR                 : 14
CHARACTER            : 61
COLON                : 
COMMA                : 21 23 45
CONST                : 
CONTINUE             : 74
DEFAULT              : 
DIV                  : 53
DO                   : 
DOT                  : 
DOUBLE               : 
DOUBLE_AMPERSAND     : 
DOUBLE_MINUS         : 
DOUBLE_PIPE          : 
DOUBLE_PLUS          : 
ELLIPSIS             : 21
ELSE                 : 78
ENUM                 : 
EQ                   : 33
EQ_AMPERSAND         : 
EQ_CARET             : 
EQ_DIV               : 
EQ_MINUS             : 31
EQ_MODULO            : 
EQ_PIPE              : 
EQ_PLUS              : 30
EQ_SHIFT_LEFT        : 
EQ_SHIFT_RIGHT       : 
EQ_TIMES             : 
EXCLAMATION          : 48
EXTERN               : 8
FLOAT                : 
FNUMBER              : 60
FOR                  : 76
GOTO                 : 
GREATER              : 37
GREATER_EQ           : 39
ID                   : 17 58
IF                   : 77 78
INT                  : 13
INUMBER              : 59
LBRACE               : 25 26
LBRACKET             : 43
LESS                 : 36
LESS_EQ              : 38
LONG                 : 
LPAREN               : 18 19 41 42 63 75 76 77 78
MINUS                : 47 57
MODULO               : 54
NOT_EQ               : 34
PIPE                 : 
PLUS                 : 56
POUND                : 
QUESTION             : 
RBRACE               : 25 26
RBRACKET             : 43
REGISTER             : 
RETURN               : 71 72
RPAREN               : 18 19 41 42 63 75 76 77 78
SEMICOLON            : 7 8 27 71 72 73 74
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 6
STRING               : 64 65
STRUCT               : 
SWITCH               : 
TILDE                : 
TIMES                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 
VOLATILE             : 
WHILE                : 75
error                : 

Nonterminals, with rules where they appear

additive_expression  : 35 36 37 38 39 56 57
argument_expression_list : 41 45
compound_statement   : 5 6 66
declaration          : 4 11 12
declaration_list     : 10 12
declaration_list_opt : 25 26
declarator           : 5 6 7 8 16 24
direct_declarator    : 15 18 19
empty                : 9
equality_expression  : 28 29 30 31 33 34
expression           : 27 29 30 31 43 44 45 63 72 75 76 77 78
expression_statement : 67 76 76
external_declaration : 1 2
function_definition  : 3
iteration_statement  : 69
jump_statement       : 70
mult_expression      : 52 53 54 55 56 57
parameter_declaration : 22 23
parameter_list       : 20 21 23
parameter_type_list  : 18
postfix_expression   : 41 42 43 46
primary_expression   : 40
relational_expression : 32 33 34 36 37 38 39
selection_statement  : 68
statement            : 75 76 77 78 78 79 80
statement_list       : 25 80
string_literal       : 62 65
translation_unit     : 2 0
type_specifier       : 5 6 7 8 24
unary_expression     : 47 48 49 50 51 52 53 54


Parsing method: SLR


state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier declarator compound_statement
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    STATIC          shift and go to state 7
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5


    external_declaration shift and go to state 1
    function_definition shift and go to state 2
    declaration     shift and go to state 4
    type_specifier  shift and go to state 6
    translation_unit shift and go to state 9

state 1

    (1) translation_unit -> external_declaration .

    $               reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)



state 2

    (3) external_declaration -> function_definition .

    $               reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)



state 3

    (13) type_specifier -> INT .

    ID              reduce using rule 13 (type_specifier -> INT .)
    ASTERISK        reduce using rule 13 (type_specifier -> INT .)



state 4

    (4) external_declaration -> declaration .

    $               reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)



state 5

    (14) type_specifier -> CHAR .

    ID              reduce using rule 14 (type_specifier -> CHAR .)
    ASTERISK        reduce using rule 14 (type_specifier -> CHAR .)



state 6

    (5) function_definition -> type_specifier . declarator compound_statement
    (7) declaration -> type_specifier . declarator SEMICOLON
    (15) declarator -> . direct_declarator
    (16) declarator -> . ASTERISK declarator
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (19) direct_declarator -> . direct_declarator LPAREN RPAREN

    ASTERISK        shift and go to state 11
    ID              shift and go to state 13


    direct_declarator shift and go to state 10
    declarator      shift and go to state 12

state 7

    (6) function_definition -> STATIC . type_specifier declarator compound_statement
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    INT             shift and go to state 3
    CHAR            shift and go to state 5


    type_specifier  shift and go to state 14

state 8

    (8) declaration -> EXTERN . type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    INT             shift and go to state 3
    CHAR            shift and go to state 5


    type_specifier  shift and go to state 15

state 9

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier declarator compound_statement
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    STATIC          shift and go to state 7
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5


    external_declaration shift and go to state 16
    function_definition shift and go to state 2
    declaration     shift and go to state 4
    type_specifier  shift and go to state 6

state 10

    (15) declarator -> direct_declarator .
    (18) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (19) direct_declarator -> direct_declarator . LPAREN RPAREN

    LBRACE          reduce using rule 15 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 15 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 15 (declarator -> direct_declarator .)
    COMMA           reduce using rule 15 (declarator -> direct_declarator .)
    LPAREN          shift and go to state 17

  ! LPAREN          [ shift and go to state 17 ]


state 11

    (16) declarator -> ASTERISK . declarator
    (15) declarator -> . direct_declarator
    (16) declarator -> . ASTERISK declarator
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (19) direct_declarator -> . direct_declarator LPAREN RPAREN

    ASTERISK        shift and go to state 11
    ID              shift and go to state 13


    direct_declarator shift and go to state 10
    declarator      shift and go to state 18

state 12

    (5) function_definition -> type_specifier declarator . compound_statement
    (7) declaration -> type_specifier declarator . SEMICOLON
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE

    SEMICOLON       shift and go to state 19
    LBRACE          shift and go to state 21

  ! LBRACE          [ shift and go to state 21 ]

    compound_statement shift and go to state 20

state 13

    (17) direct_declarator -> ID .

    LBRACE          reduce using rule 17 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 17 (direct_declarator -> ID .)
    LPAREN          reduce using rule 17 (direct_declarator -> ID .)
    RPAREN          reduce using rule 17 (direct_declarator -> ID .)
    COMMA           reduce using rule 17 (direct_declarator -> ID .)



state 14

    (6) function_definition -> STATIC type_specifier . declarator compound_statement
    (15) declarator -> . direct_declarator
    (16) declarator -> . ASTERISK declarator
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (19) direct_declarator -> . direct_declarator LPAREN RPAREN

    ASTERISK        shift and go to state 11
    ID              shift and go to state 13


    direct_declarator shift and go to state 10
    declarator      shift and go to state 22

state 15

    (8) declaration -> EXTERN type_specifier . declarator SEMICOLON
    (15) declarator -> . direct_declarator
    (16) declarator -> . ASTERISK declarator
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (19) direct_declarator -> . direct_declarator LPAREN RPAREN

    ASTERISK        shift and go to state 11
    ID              shift and go to state 13


    direct_declarator shift and go to state 10
    declarator      shift and go to state 23

state 16

    (2) translation_unit -> translation_unit external_declaration .

    $               reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)



state 17

    (18) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (19) direct_declarator -> direct_declarator LPAREN . RPAREN
    (20) parameter_type_list -> . parameter_list
    (21) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (22) parameter_list -> . parameter_declaration
    (23) parameter_list -> . parameter_list COMMA parameter_declaration
    (24) parameter_declaration -> . type_specifier declarator
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    RPAREN          shift and go to state 25
    INT             shift and go to state 3
    CHAR            shift and go to state 5


    type_specifier  shift and go to state 24
    parameter_list  shift and go to state 26
    parameter_type_list shift and go to state 27
    parameter_declaration shift and go to state 28

state 18

    (16) declarator -> ASTERISK declarator .

    LBRACE          reduce using rule 16 (declarator -> ASTERISK declarator .)
    SEMICOLON       reduce using rule 16 (declarator -> ASTERISK declarator .)
    RPAREN          reduce using rule 16 (declarator -> ASTERISK declarator .)
    COMMA           reduce using rule 16 (declarator -> ASTERISK declarator .)



state 19

    (7) declaration -> type_specifier declarator SEMICOLON .

    $               reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    INT             reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    STATIC          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    EXTERN          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    IF              reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    EXCLAMATION     reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    ASTERISK        reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    ID              reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    LPAREN          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)



state 20

    (5) function_definition -> type_specifier declarator compound_statement .

    $               reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    STATIC          reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    EXTERN          reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)



state 21

    (25) compound_statement -> LBRACE . declaration_list_opt statement_list RBRACE
    (26) compound_statement -> LBRACE . declaration_list_opt RBRACE
    (9) declaration_list_opt -> . empty
    (10) declaration_list_opt -> . declaration_list
    (81) empty -> .
    (11) declaration_list -> . declaration
    (12) declaration_list -> . declaration_list declaration
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    LBRACE          reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    BREAK           reduce using rule 81 (empty -> .)
    CONTINUE        reduce using rule 81 (empty -> .)
    MINUS           reduce using rule 81 (empty -> .)
    EXCLAMATION     reduce using rule 81 (empty -> .)
    ASTERISK        reduce using rule 81 (empty -> .)
    AMPERSAND       reduce using rule 81 (empty -> .)
    ID              reduce using rule 81 (empty -> .)
    INUMBER         reduce using rule 81 (empty -> .)
    FNUMBER         reduce using rule 81 (empty -> .)
    CHARACTER       reduce using rule 81 (empty -> .)
    STRING          reduce using rule 81 (empty -> .)
    LPAREN          reduce using rule 81 (empty -> .)
    RBRACE          reduce using rule 81 (empty -> .)
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5


    declaration_list_opt shift and go to state 29
    type_specifier  shift and go to state 31
    declaration_list shift and go to state 30
    declaration     shift and go to state 32
    empty           shift and go to state 33

state 22

    (6) function_definition -> STATIC type_specifier declarator . compound_statement
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE

    LBRACE          shift and go to state 21

  ! LBRACE          [ shift and go to state 21 ]

    compound_statement shift and go to state 34

state 23

    (8) declaration -> EXTERN type_specifier declarator . SEMICOLON

    SEMICOLON       shift and go to state 35



state 24

    (24) parameter_declaration -> type_specifier . declarator
    (15) declarator -> . direct_declarator
    (16) declarator -> . ASTERISK declarator
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (19) direct_declarator -> . direct_declarator LPAREN RPAREN

    ASTERISK        shift and go to state 11
    ID              shift and go to state 13


    direct_declarator shift and go to state 10
    declarator      shift and go to state 36

state 25

    (19) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACE          reduce using rule 19 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 19 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 19 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 19 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 19 (direct_declarator -> direct_declarator LPAREN RPAREN .)



state 26

    (20) parameter_type_list -> parameter_list .
    (21) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (23) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 20 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 37

  ! COMMA           [ shift and go to state 37 ]


state 27

    (18) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 38



state 28

    (22) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 22 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 22 (parameter_list -> parameter_declaration .)



state 29

    (25) compound_statement -> LBRACE declaration_list_opt . statement_list RBRACE
    (26) compound_statement -> LBRACE declaration_list_opt . RBRACE
    (79) statement_list -> . statement
    (80) statement_list -> . statement_list statement
    (66) statement -> . compound_statement
    (67) statement -> . expression_statement
    (68) statement -> . selection_statement
    (69) statement -> . iteration_statement
    (70) statement -> . jump_statement
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (27) expression_statement -> . expression SEMICOLON
    (77) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (75) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (76) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (71) jump_statement -> . RETURN SEMICOLON
    (72) jump_statement -> . RETURN expression SEMICOLON
    (73) jump_statement -> . BREAK SEMICOLON
    (74) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    RBRACE          shift and go to state 55
    LBRACE          shift and go to state 21
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 56
    RETURN          shift and go to state 41
    BREAK           shift and go to state 68
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45

  ! LBRACE          [ shift and go to state 21 ]
  ! IF              [ shift and go to state 64 ]
  ! RETURN          [ shift and go to state 41 ]

    expression_statement shift and go to state 39
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    compound_statement shift and go to state 50
    expression      shift and go to state 71
    selection_statement shift and go to state 51
    postfix_expression shift and go to state 52
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    jump_statement  shift and go to state 65
    statement       shift and go to state 54
    statement_list  shift and go to state 70
    iteration_statement shift and go to state 46
    primary_expression shift and go to state 60
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53

state 30

    (10) declaration_list_opt -> declaration_list .
    (12) declaration_list -> declaration_list . declaration
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    LBRACE          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CONTINUE        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    MINUS           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXCLAMATION     reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ASTERISK        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    AMPERSAND       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    INUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FNUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CHARACTER       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    STRING          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    LPAREN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RBRACE          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5


    declaration     shift and go to state 72
    type_specifier  shift and go to state 31

state 31

    (7) declaration -> type_specifier . declarator SEMICOLON
    (15) declarator -> . direct_declarator
    (16) declarator -> . ASTERISK declarator
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (19) direct_declarator -> . direct_declarator LPAREN RPAREN

    ASTERISK        shift and go to state 11
    ID              shift and go to state 13


    direct_declarator shift and go to state 10
    declarator      shift and go to state 73

state 32

    (11) declaration_list -> declaration .

    INT             reduce using rule 11 (declaration_list -> declaration .)
    CHAR            reduce using rule 11 (declaration_list -> declaration .)
    EXTERN          reduce using rule 11 (declaration_list -> declaration .)
    LBRACE          reduce using rule 11 (declaration_list -> declaration .)
    IF              reduce using rule 11 (declaration_list -> declaration .)
    WHILE           reduce using rule 11 (declaration_list -> declaration .)
    FOR             reduce using rule 11 (declaration_list -> declaration .)
    RETURN          reduce using rule 11 (declaration_list -> declaration .)
    BREAK           reduce using rule 11 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 11 (declaration_list -> declaration .)
    MINUS           reduce using rule 11 (declaration_list -> declaration .)
    EXCLAMATION     reduce using rule 11 (declaration_list -> declaration .)
    ASTERISK        reduce using rule 11 (declaration_list -> declaration .)
    AMPERSAND       reduce using rule 11 (declaration_list -> declaration .)
    ID              reduce using rule 11 (declaration_list -> declaration .)
    INUMBER         reduce using rule 11 (declaration_list -> declaration .)
    FNUMBER         reduce using rule 11 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 11 (declaration_list -> declaration .)
    STRING          reduce using rule 11 (declaration_list -> declaration .)
    LPAREN          reduce using rule 11 (declaration_list -> declaration .)
    RBRACE          reduce using rule 11 (declaration_list -> declaration .)



state 33

    (9) declaration_list_opt -> empty .

    LBRACE          reduce using rule 9 (declaration_list_opt -> empty .)
    IF              reduce using rule 9 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 9 (declaration_list_opt -> empty .)
    FOR             reduce using rule 9 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 9 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 9 (declaration_list_opt -> empty .)
    CONTINUE        reduce using rule 9 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 9 (declaration_list_opt -> empty .)
    EXCLAMATION     reduce using rule 9 (declaration_list_opt -> empty .)
    ASTERISK        reduce using rule 9 (declaration_list_opt -> empty .)
    AMPERSAND       reduce using rule 9 (declaration_list_opt -> empty .)
    ID              reduce using rule 9 (declaration_list_opt -> empty .)
    INUMBER         reduce using rule 9 (declaration_list_opt -> empty .)
    FNUMBER         reduce using rule 9 (declaration_list_opt -> empty .)
    CHARACTER       reduce using rule 9 (declaration_list_opt -> empty .)
    STRING          reduce using rule 9 (declaration_list_opt -> empty .)
    LPAREN          reduce using rule 9 (declaration_list_opt -> empty .)
    RBRACE          reduce using rule 9 (declaration_list_opt -> empty .)



state 34

    (6) function_definition -> STATIC type_specifier declarator compound_statement .

    $               reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    EXTERN          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)



state 35

    (8) declaration -> EXTERN type_specifier declarator SEMICOLON .

    $               reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INT             reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    STATIC          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    EXTERN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    IF              reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    EXCLAMATION     reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    ASTERISK        reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    ID              reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LPAREN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)



state 36

    (24) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 24 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 24 (parameter_declaration -> type_specifier declarator .)



state 37

    (21) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (23) parameter_list -> parameter_list COMMA . parameter_declaration
    (24) parameter_declaration -> . type_specifier declarator
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    ELLIPSIS        shift and go to state 75
    INT             shift and go to state 3
    CHAR            shift and go to state 5


    parameter_declaration shift and go to state 74
    type_specifier  shift and go to state 24

state 38

    (18) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACE          reduce using rule 18 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 18 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 18 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 18 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 18 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)



state 39

    (67) statement -> expression_statement .

    ELSE            reduce using rule 67 (statement -> expression_statement .)
    RBRACE          reduce using rule 67 (statement -> expression_statement .)
    LBRACE          reduce using rule 67 (statement -> expression_statement .)
    IF              reduce using rule 67 (statement -> expression_statement .)
    WHILE           reduce using rule 67 (statement -> expression_statement .)
    FOR             reduce using rule 67 (statement -> expression_statement .)
    RETURN          reduce using rule 67 (statement -> expression_statement .)
    BREAK           reduce using rule 67 (statement -> expression_statement .)
    CONTINUE        reduce using rule 67 (statement -> expression_statement .)
    MINUS           reduce using rule 67 (statement -> expression_statement .)
    EXCLAMATION     reduce using rule 67 (statement -> expression_statement .)
    ASTERISK        reduce using rule 67 (statement -> expression_statement .)
    AMPERSAND       reduce using rule 67 (statement -> expression_statement .)
    ID              reduce using rule 67 (statement -> expression_statement .)
    INUMBER         reduce using rule 67 (statement -> expression_statement .)
    FNUMBER         reduce using rule 67 (statement -> expression_statement .)
    CHARACTER       reduce using rule 67 (statement -> expression_statement .)
    STRING          reduce using rule 67 (statement -> expression_statement .)
    LPAREN          reduce using rule 67 (statement -> expression_statement .)



state 40

    (48) unary_expression -> EXCLAMATION . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 76
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60

state 41

    (71) jump_statement -> RETURN . SEMICOLON
    (72) jump_statement -> RETURN . expression SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    SEMICOLON       shift and go to state 77
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53
    mult_expression shift and go to state 58
    expression      shift and go to state 78
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 42

    (51) mult_expression -> unary_expression .

    ASTERISK        reduce using rule 51 (mult_expression -> unary_expression .)
    DIV             reduce using rule 51 (mult_expression -> unary_expression .)
    MODULO          reduce using rule 51 (mult_expression -> unary_expression .)
    SEMICOLON       reduce using rule 51 (mult_expression -> unary_expression .)
    ASSIGN          reduce using rule 51 (mult_expression -> unary_expression .)
    EQ_PLUS         reduce using rule 51 (mult_expression -> unary_expression .)
    EQ_MINUS        reduce using rule 51 (mult_expression -> unary_expression .)
    EQ              reduce using rule 51 (mult_expression -> unary_expression .)
    NOT_EQ          reduce using rule 51 (mult_expression -> unary_expression .)
    LESS            reduce using rule 51 (mult_expression -> unary_expression .)
    GREATER         reduce using rule 51 (mult_expression -> unary_expression .)
    LESS_EQ         reduce using rule 51 (mult_expression -> unary_expression .)
    GREATER_EQ      reduce using rule 51 (mult_expression -> unary_expression .)
    PLUS            reduce using rule 51 (mult_expression -> unary_expression .)
    MINUS           reduce using rule 51 (mult_expression -> unary_expression .)
    RBRACKET        reduce using rule 51 (mult_expression -> unary_expression .)
    RPAREN          reduce using rule 51 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 51 (mult_expression -> unary_expression .)



state 43

    (61) primary_expression -> CHARACTER .

    LPAREN          reduce using rule 61 (primary_expression -> CHARACTER .)
    LBRACKET        reduce using rule 61 (primary_expression -> CHARACTER .)
    ASTERISK        reduce using rule 61 (primary_expression -> CHARACTER .)
    DIV             reduce using rule 61 (primary_expression -> CHARACTER .)
    MODULO          reduce using rule 61 (primary_expression -> CHARACTER .)
    SEMICOLON       reduce using rule 61 (primary_expression -> CHARACTER .)
    ASSIGN          reduce using rule 61 (primary_expression -> CHARACTER .)
    EQ_PLUS         reduce using rule 61 (primary_expression -> CHARACTER .)
    EQ_MINUS        reduce using rule 61 (primary_expression -> CHARACTER .)
    EQ              reduce using rule 61 (primary_expression -> CHARACTER .)
    NOT_EQ          reduce using rule 61 (primary_expression -> CHARACTER .)
    LESS            reduce using rule 61 (primary_expression -> CHARACTER .)
    GREATER         reduce using rule 61 (primary_expression -> CHARACTER .)
    LESS_EQ         reduce using rule 61 (primary_expression -> CHARACTER .)
    GREATER_EQ      reduce using rule 61 (primary_expression -> CHARACTER .)
    PLUS            reduce using rule 61 (primary_expression -> CHARACTER .)
    MINUS           reduce using rule 61 (primary_expression -> CHARACTER .)
    RBRACKET        reduce using rule 61 (primary_expression -> CHARACTER .)
    RPAREN          reduce using rule 61 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 61 (primary_expression -> CHARACTER .)



state 44

    (75) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 79



state 45

    (64) string_literal -> STRING .

    STRING          reduce using rule 64 (string_literal -> STRING .)
    LPAREN          reduce using rule 64 (string_literal -> STRING .)
    LBRACKET        reduce using rule 64 (string_literal -> STRING .)
    ASTERISK        reduce using rule 64 (string_literal -> STRING .)
    DIV             reduce using rule 64 (string_literal -> STRING .)
    MODULO          reduce using rule 64 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 64 (string_literal -> STRING .)
    ASSIGN          reduce using rule 64 (string_literal -> STRING .)
    EQ_PLUS         reduce using rule 64 (string_literal -> STRING .)
    EQ_MINUS        reduce using rule 64 (string_literal -> STRING .)
    EQ              reduce using rule 64 (string_literal -> STRING .)
    NOT_EQ          reduce using rule 64 (string_literal -> STRING .)
    LESS            reduce using rule 64 (string_literal -> STRING .)
    GREATER         reduce using rule 64 (string_literal -> STRING .)
    LESS_EQ         reduce using rule 64 (string_literal -> STRING .)
    GREATER_EQ      reduce using rule 64 (string_literal -> STRING .)
    PLUS            reduce using rule 64 (string_literal -> STRING .)
    MINUS           reduce using rule 64 (string_literal -> STRING .)
    RBRACKET        reduce using rule 64 (string_literal -> STRING .)
    RPAREN          reduce using rule 64 (string_literal -> STRING .)
    COMMA           reduce using rule 64 (string_literal -> STRING .)



state 46

    (69) statement -> iteration_statement .

    ELSE            reduce using rule 69 (statement -> iteration_statement .)
    RBRACE          reduce using rule 69 (statement -> iteration_statement .)
    LBRACE          reduce using rule 69 (statement -> iteration_statement .)
    IF              reduce using rule 69 (statement -> iteration_statement .)
    WHILE           reduce using rule 69 (statement -> iteration_statement .)
    FOR             reduce using rule 69 (statement -> iteration_statement .)
    RETURN          reduce using rule 69 (statement -> iteration_statement .)
    BREAK           reduce using rule 69 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 69 (statement -> iteration_statement .)
    MINUS           reduce using rule 69 (statement -> iteration_statement .)
    EXCLAMATION     reduce using rule 69 (statement -> iteration_statement .)
    ASTERISK        reduce using rule 69 (statement -> iteration_statement .)
    AMPERSAND       reduce using rule 69 (statement -> iteration_statement .)
    ID              reduce using rule 69 (statement -> iteration_statement .)
    INUMBER         reduce using rule 69 (statement -> iteration_statement .)
    FNUMBER         reduce using rule 69 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 69 (statement -> iteration_statement .)
    STRING          reduce using rule 69 (statement -> iteration_statement .)
    LPAREN          reduce using rule 69 (statement -> iteration_statement .)



state 47

    (47) unary_expression -> MINUS . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 80
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60

state 48

    (35) relational_expression -> additive_expression .
    (56) additive_expression -> additive_expression . PLUS mult_expression
    (57) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 35 (relational_expression -> additive_expression .)
    ASSIGN          reduce using rule 35 (relational_expression -> additive_expression .)
    EQ_PLUS         reduce using rule 35 (relational_expression -> additive_expression .)
    EQ_MINUS        reduce using rule 35 (relational_expression -> additive_expression .)
    EQ              reduce using rule 35 (relational_expression -> additive_expression .)
    NOT_EQ          reduce using rule 35 (relational_expression -> additive_expression .)
    LESS            reduce using rule 35 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 35 (relational_expression -> additive_expression .)
    LESS_EQ         reduce using rule 35 (relational_expression -> additive_expression .)
    GREATER_EQ      reduce using rule 35 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 35 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 35 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 35 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82



state 49

    (62) primary_expression -> string_literal .
    (65) string_literal -> string_literal . STRING

    LPAREN          reduce using rule 62 (primary_expression -> string_literal .)
    LBRACKET        reduce using rule 62 (primary_expression -> string_literal .)
    ASTERISK        reduce using rule 62 (primary_expression -> string_literal .)
    DIV             reduce using rule 62 (primary_expression -> string_literal .)
    MODULO          reduce using rule 62 (primary_expression -> string_literal .)
    SEMICOLON       reduce using rule 62 (primary_expression -> string_literal .)
    ASSIGN          reduce using rule 62 (primary_expression -> string_literal .)
    EQ_PLUS         reduce using rule 62 (primary_expression -> string_literal .)
    EQ_MINUS        reduce using rule 62 (primary_expression -> string_literal .)
    EQ              reduce using rule 62 (primary_expression -> string_literal .)
    NOT_EQ          reduce using rule 62 (primary_expression -> string_literal .)
    LESS            reduce using rule 62 (primary_expression -> string_literal .)
    GREATER         reduce using rule 62 (primary_expression -> string_literal .)
    LESS_EQ         reduce using rule 62 (primary_expression -> string_literal .)
    GREATER_EQ      reduce using rule 62 (primary_expression -> string_literal .)
    PLUS            reduce using rule 62 (primary_expression -> string_literal .)
    MINUS           reduce using rule 62 (primary_expression -> string_literal .)
    RBRACKET        reduce using rule 62 (primary_expression -> string_literal .)
    RPAREN          reduce using rule 62 (primary_expression -> string_literal .)
    COMMA           reduce using rule 62 (primary_expression -> string_literal .)
    STRING          shift and go to state 83



state 50

    (66) statement -> compound_statement .

    ELSE            reduce using rule 66 (statement -> compound_statement .)
    RBRACE          reduce using rule 66 (statement -> compound_statement .)
    LBRACE          reduce using rule 66 (statement -> compound_statement .)
    IF              reduce using rule 66 (statement -> compound_statement .)
    WHILE           reduce using rule 66 (statement -> compound_statement .)
    FOR             reduce using rule 66 (statement -> compound_statement .)
    RETURN          reduce using rule 66 (statement -> compound_statement .)
    BREAK           reduce using rule 66 (statement -> compound_statement .)
    CONTINUE        reduce using rule 66 (statement -> compound_statement .)
    MINUS           reduce using rule 66 (statement -> compound_statement .)
    EXCLAMATION     reduce using rule 66 (statement -> compound_statement .)
    ASTERISK        reduce using rule 66 (statement -> compound_statement .)
    AMPERSAND       reduce using rule 66 (statement -> compound_statement .)
    ID              reduce using rule 66 (statement -> compound_statement .)
    INUMBER         reduce using rule 66 (statement -> compound_statement .)
    FNUMBER         reduce using rule 66 (statement -> compound_statement .)
    CHARACTER       reduce using rule 66 (statement -> compound_statement .)
    STRING          reduce using rule 66 (statement -> compound_statement .)
    LPAREN          reduce using rule 66 (statement -> compound_statement .)



state 51

    (68) statement -> selection_statement .

    ELSE            reduce using rule 68 (statement -> selection_statement .)
    RBRACE          reduce using rule 68 (statement -> selection_statement .)
    LBRACE          reduce using rule 68 (statement -> selection_statement .)
    IF              reduce using rule 68 (statement -> selection_statement .)
    WHILE           reduce using rule 68 (statement -> selection_statement .)
    FOR             reduce using rule 68 (statement -> selection_statement .)
    RETURN          reduce using rule 68 (statement -> selection_statement .)
    BREAK           reduce using rule 68 (statement -> selection_statement .)
    CONTINUE        reduce using rule 68 (statement -> selection_statement .)
    MINUS           reduce using rule 68 (statement -> selection_statement .)
    EXCLAMATION     reduce using rule 68 (statement -> selection_statement .)
    ASTERISK        reduce using rule 68 (statement -> selection_statement .)
    AMPERSAND       reduce using rule 68 (statement -> selection_statement .)
    ID              reduce using rule 68 (statement -> selection_statement .)
    INUMBER         reduce using rule 68 (statement -> selection_statement .)
    FNUMBER         reduce using rule 68 (statement -> selection_statement .)
    CHARACTER       reduce using rule 68 (statement -> selection_statement .)
    STRING          reduce using rule 68 (statement -> selection_statement .)
    LPAREN          reduce using rule 68 (statement -> selection_statement .)



state 52

    (46) unary_expression -> postfix_expression .
    (41) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> postfix_expression . LPAREN RPAREN
    (43) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET

    ASTERISK        reduce using rule 46 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 46 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 46 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 46 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 46 (unary_expression -> postfix_expression .)
    EQ_PLUS         reduce using rule 46 (unary_expression -> postfix_expression .)
    EQ_MINUS        reduce using rule 46 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 46 (unary_expression -> postfix_expression .)
    NOT_EQ          reduce using rule 46 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 46 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 46 (unary_expression -> postfix_expression .)
    LESS_EQ         reduce using rule 46 (unary_expression -> postfix_expression .)
    GREATER_EQ      reduce using rule 46 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 46 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 46 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 46 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 46 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 46 (unary_expression -> postfix_expression .)
    LPAREN          shift and go to state 85
    LBRACKET        shift and go to state 84

  ! LPAREN          [ shift and go to state 85 ]


state 53

    (32) equality_expression -> relational_expression .
    (36) relational_expression -> relational_expression . LESS additive_expression
    (37) relational_expression -> relational_expression . GREATER additive_expression
    (38) relational_expression -> relational_expression . LESS_EQ additive_expression
    (39) relational_expression -> relational_expression . GREATER_EQ additive_expression

    SEMICOLON       reduce using rule 32 (equality_expression -> relational_expression .)
    ASSIGN          reduce using rule 32 (equality_expression -> relational_expression .)
    EQ_PLUS         reduce using rule 32 (equality_expression -> relational_expression .)
    EQ_MINUS        reduce using rule 32 (equality_expression -> relational_expression .)
    EQ              reduce using rule 32 (equality_expression -> relational_expression .)
    NOT_EQ          reduce using rule 32 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 32 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 32 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 32 (equality_expression -> relational_expression .)
    LESS            shift and go to state 88
    GREATER         shift and go to state 87
    LESS_EQ         shift and go to state 86
    GREATER_EQ      shift and go to state 89



state 54

    (79) statement_list -> statement .

    RBRACE          reduce using rule 79 (statement_list -> statement .)
    LBRACE          reduce using rule 79 (statement_list -> statement .)
    IF              reduce using rule 79 (statement_list -> statement .)
    WHILE           reduce using rule 79 (statement_list -> statement .)
    FOR             reduce using rule 79 (statement_list -> statement .)
    RETURN          reduce using rule 79 (statement_list -> statement .)
    BREAK           reduce using rule 79 (statement_list -> statement .)
    CONTINUE        reduce using rule 79 (statement_list -> statement .)
    MINUS           reduce using rule 79 (statement_list -> statement .)
    EXCLAMATION     reduce using rule 79 (statement_list -> statement .)
    ASTERISK        reduce using rule 79 (statement_list -> statement .)
    AMPERSAND       reduce using rule 79 (statement_list -> statement .)
    ID              reduce using rule 79 (statement_list -> statement .)
    INUMBER         reduce using rule 79 (statement_list -> statement .)
    FNUMBER         reduce using rule 79 (statement_list -> statement .)
    CHARACTER       reduce using rule 79 (statement_list -> statement .)
    STRING          reduce using rule 79 (statement_list -> statement .)
    LPAREN          reduce using rule 79 (statement_list -> statement .)



state 55

    (26) compound_statement -> LBRACE declaration_list_opt RBRACE .

    $               reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    INT             reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CHAR            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    STATIC          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    EXTERN          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ELSE            reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    RBRACE          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LBRACE          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    IF              reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    WHILE           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FOR             reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    RETURN          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    BREAK           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CONTINUE        reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    MINUS           reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    EXCLAMATION     reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ASTERISK        reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    AMPERSAND       reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    ID              reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    INUMBER         reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    FNUMBER         reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    CHARACTER       reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    STRING          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)
    LPAREN          reduce using rule 26 (compound_statement -> LBRACE declaration_list_opt RBRACE .)



state 56

    (76) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 90



state 57

    (49) unary_expression -> ASTERISK . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 91
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60

state 58

    (55) additive_expression -> mult_expression .
    (52) mult_expression -> mult_expression . ASTERISK unary_expression
    (53) mult_expression -> mult_expression . DIV unary_expression
    (54) mult_expression -> mult_expression . MODULO unary_expression

    SEMICOLON       reduce using rule 55 (additive_expression -> mult_expression .)
    ASSIGN          reduce using rule 55 (additive_expression -> mult_expression .)
    EQ_PLUS         reduce using rule 55 (additive_expression -> mult_expression .)
    EQ_MINUS        reduce using rule 55 (additive_expression -> mult_expression .)
    EQ              reduce using rule 55 (additive_expression -> mult_expression .)
    NOT_EQ          reduce using rule 55 (additive_expression -> mult_expression .)
    LESS            reduce using rule 55 (additive_expression -> mult_expression .)
    GREATER         reduce using rule 55 (additive_expression -> mult_expression .)
    LESS_EQ         reduce using rule 55 (additive_expression -> mult_expression .)
    GREATER_EQ      reduce using rule 55 (additive_expression -> mult_expression .)
    PLUS            reduce using rule 55 (additive_expression -> mult_expression .)
    MINUS           reduce using rule 55 (additive_expression -> mult_expression .)
    RBRACKET        reduce using rule 55 (additive_expression -> mult_expression .)
    RPAREN          reduce using rule 55 (additive_expression -> mult_expression .)
    COMMA           reduce using rule 55 (additive_expression -> mult_expression .)
    ASTERISK        shift and go to state 94
    DIV             shift and go to state 93
    MODULO          shift and go to state 92



state 59

    (50) unary_expression -> AMPERSAND . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 95
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60

state 60

    (40) postfix_expression -> primary_expression .

    LPAREN          reduce using rule 40 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 40 (postfix_expression -> primary_expression .)
    ASTERISK        reduce using rule 40 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 40 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 40 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 40 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 40 (postfix_expression -> primary_expression .)
    EQ_PLUS         reduce using rule 40 (postfix_expression -> primary_expression .)
    EQ_MINUS        reduce using rule 40 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 40 (postfix_expression -> primary_expression .)
    NOT_EQ          reduce using rule 40 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 40 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 40 (postfix_expression -> primary_expression .)
    LESS_EQ         reduce using rule 40 (postfix_expression -> primary_expression .)
    GREATER_EQ      reduce using rule 40 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 40 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 40 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 40 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 40 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 40 (postfix_expression -> primary_expression .)



state 61

    (63) primary_expression -> LPAREN . expression RPAREN
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53
    mult_expression shift and go to state 58
    expression      shift and go to state 96
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 62

    (58) primary_expression -> ID .

    LPAREN          reduce using rule 58 (primary_expression -> ID .)
    LBRACKET        reduce using rule 58 (primary_expression -> ID .)
    ASTERISK        reduce using rule 58 (primary_expression -> ID .)
    DIV             reduce using rule 58 (primary_expression -> ID .)
    MODULO          reduce using rule 58 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 58 (primary_expression -> ID .)
    ASSIGN          reduce using rule 58 (primary_expression -> ID .)
    EQ_PLUS         reduce using rule 58 (primary_expression -> ID .)
    EQ_MINUS        reduce using rule 58 (primary_expression -> ID .)
    EQ              reduce using rule 58 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 58 (primary_expression -> ID .)
    LESS            reduce using rule 58 (primary_expression -> ID .)
    GREATER         reduce using rule 58 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 58 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 58 (primary_expression -> ID .)
    PLUS            reduce using rule 58 (primary_expression -> ID .)
    MINUS           reduce using rule 58 (primary_expression -> ID .)
    RBRACKET        reduce using rule 58 (primary_expression -> ID .)
    RPAREN          reduce using rule 58 (primary_expression -> ID .)
    COMMA           reduce using rule 58 (primary_expression -> ID .)



state 63

    (28) expression -> equality_expression .
    (29) expression -> equality_expression . ASSIGN expression
    (30) expression -> equality_expression . EQ_PLUS expression
    (31) expression -> equality_expression . EQ_MINUS expression
    (33) equality_expression -> equality_expression . EQ relational_expression
    (34) equality_expression -> equality_expression . NOT_EQ relational_expression

    SEMICOLON       reduce using rule 28 (expression -> equality_expression .)
    RBRACKET        reduce using rule 28 (expression -> equality_expression .)
    RPAREN          reduce using rule 28 (expression -> equality_expression .)
    COMMA           reduce using rule 28 (expression -> equality_expression .)
    ASSIGN          shift and go to state 101
    EQ_PLUS         shift and go to state 97
    EQ_MINUS        shift and go to state 98
    EQ              shift and go to state 100
    NOT_EQ          shift and go to state 99



state 64

    (77) selection_statement -> IF . LPAREN expression RPAREN statement
    (78) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 102

  ! LPAREN          [ shift and go to state 102 ]


state 65

    (70) statement -> jump_statement .

    ELSE            reduce using rule 70 (statement -> jump_statement .)
    RBRACE          reduce using rule 70 (statement -> jump_statement .)
    LBRACE          reduce using rule 70 (statement -> jump_statement .)
    IF              reduce using rule 70 (statement -> jump_statement .)
    WHILE           reduce using rule 70 (statement -> jump_statement .)
    FOR             reduce using rule 70 (statement -> jump_statement .)
    RETURN          reduce using rule 70 (statement -> jump_statement .)
    BREAK           reduce using rule 70 (statement -> jump_statement .)
    CONTINUE        reduce using rule 70 (statement -> jump_statement .)
    MINUS           reduce using rule 70 (statement -> jump_statement .)
    EXCLAMATION     reduce using rule 70 (statement -> jump_statement .)
    ASTERISK        reduce using rule 70 (statement -> jump_statement .)
    AMPERSAND       reduce using rule 70 (statement -> jump_statement .)
    ID              reduce using rule 70 (statement -> jump_statement .)
    INUMBER         reduce using rule 70 (statement -> jump_statement .)
    FNUMBER         reduce using rule 70 (statement -> jump_statement .)
    CHARACTER       reduce using rule 70 (statement -> jump_statement .)
    STRING          reduce using rule 70 (statement -> jump_statement .)
    LPAREN          reduce using rule 70 (statement -> jump_statement .)



state 66

    (60) primary_expression -> FNUMBER .

    LPAREN          reduce using rule 60 (primary_expression -> FNUMBER .)
    LBRACKET        reduce using rule 60 (primary_expression -> FNUMBER .)
    ASTERISK        reduce using rule 60 (primary_expression -> FNUMBER .)
    DIV             reduce using rule 60 (primary_expression -> FNUMBER .)
    MODULO          reduce using rule 60 (primary_expression -> FNUMBER .)
    SEMICOLON       reduce using rule 60 (primary_expression -> FNUMBER .)
    ASSIGN          reduce using rule 60 (primary_expression -> FNUMBER .)
    EQ_PLUS         reduce using rule 60 (primary_expression -> FNUMBER .)
    EQ_MINUS        reduce using rule 60 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 60 (primary_expression -> FNUMBER .)
    NOT_EQ          reduce using rule 60 (primary_expression -> FNUMBER .)
    LESS            reduce using rule 60 (primary_expression -> FNUMBER .)
    GREATER         reduce using rule 60 (primary_expression -> FNUMBER .)
    LESS_EQ         reduce using rule 60 (primary_expression -> FNUMBER .)
    GREATER_EQ      reduce using rule 60 (primary_expression -> FNUMBER .)
    PLUS            reduce using rule 60 (primary_expression -> FNUMBER .)
    MINUS           reduce using rule 60 (primary_expression -> FNUMBER .)
    RBRACKET        reduce using rule 60 (primary_expression -> FNUMBER .)
    RPAREN          reduce using rule 60 (primary_expression -> FNUMBER .)
    COMMA           reduce using rule 60 (primary_expression -> FNUMBER .)



state 67

    (59) primary_expression -> INUMBER .

    LPAREN          reduce using rule 59 (primary_expression -> INUMBER .)
    LBRACKET        reduce using rule 59 (primary_expression -> INUMBER .)
    ASTERISK        reduce using rule 59 (primary_expression -> INUMBER .)
    DIV             reduce using rule 59 (primary_expression -> INUMBER .)
    MODULO          reduce using rule 59 (primary_expression -> INUMBER .)
    SEMICOLON       reduce using rule 59 (primary_expression -> INUMBER .)
    ASSIGN          reduce using rule 59 (primary_expression -> INUMBER .)
    EQ_PLUS         reduce using rule 59 (primary_expression -> INUMBER .)
    EQ_MINUS        reduce using rule 59 (primary_expression -> INUMBER .)
    EQ              reduce using rule 59 (primary_expression -> INUMBER .)
    NOT_EQ          reduce using rule 59 (primary_expression -> INUMBER .)
    LESS            reduce using rule 59 (primary_expression -> INUMBER .)
    GREATER         reduce using rule 59 (primary_expression -> INUMBER .)
    LESS_EQ         reduce using rule 59 (primary_expression -> INUMBER .)
    GREATER_EQ      reduce using rule 59 (primary_expression -> INUMBER .)
    PLUS            reduce using rule 59 (primary_expression -> INUMBER .)
    MINUS           reduce using rule 59 (primary_expression -> INUMBER .)
    RBRACKET        reduce using rule 59 (primary_expression -> INUMBER .)
    RPAREN          reduce using rule 59 (primary_expression -> INUMBER .)
    COMMA           reduce using rule 59 (primary_expression -> INUMBER .)



state 68

    (73) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 103



state 69

    (74) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 104



state 70

    (25) compound_statement -> LBRACE declaration_list_opt statement_list . RBRACE
    (80) statement_list -> statement_list . statement
    (66) statement -> . compound_statement
    (67) statement -> . expression_statement
    (68) statement -> . selection_statement
    (69) statement -> . iteration_statement
    (70) statement -> . jump_statement
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (27) expression_statement -> . expression SEMICOLON
    (77) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (75) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (76) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (71) jump_statement -> . RETURN SEMICOLON
    (72) jump_statement -> . RETURN expression SEMICOLON
    (73) jump_statement -> . BREAK SEMICOLON
    (74) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    RBRACE          shift and go to state 106
    LBRACE          shift and go to state 21
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 56
    RETURN          shift and go to state 41
    BREAK           shift and go to state 68
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45

  ! LBRACE          [ shift and go to state 21 ]
  ! IF              [ shift and go to state 64 ]
  ! RETURN          [ shift and go to state 41 ]

    expression_statement shift and go to state 39
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    compound_statement shift and go to state 50
    expression      shift and go to state 71
    selection_statement shift and go to state 51
    postfix_expression shift and go to state 52
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    jump_statement  shift and go to state 65
    statement       shift and go to state 105
    iteration_statement shift and go to state 46
    primary_expression shift and go to state 60
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53

state 71

    (27) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 107



state 72

    (12) declaration_list -> declaration_list declaration .

    INT             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    EXCLAMATION     reduce using rule 12 (declaration_list -> declaration_list declaration .)
    ASTERISK        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    AMPERSAND       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FNUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)



state 73

    (7) declaration -> type_specifier declarator . SEMICOLON

    SEMICOLON       shift and go to state 19



state 74

    (23) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 23 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 23 (parameter_list -> parameter_list COMMA parameter_declaration .)



state 75

    (21) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 21 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)



state 76

    (48) unary_expression -> EXCLAMATION unary_expression .

    ASTERISK        reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    DIV             reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    SEMICOLON       reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    ASSIGN          reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    EQ_PLUS         reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    EQ_MINUS        reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    EQ              reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQ          reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    LESS            reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER         reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQ         reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQ      reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 48 (unary_expression -> EXCLAMATION unary_expression .)



state 77

    (71) jump_statement -> RETURN SEMICOLON .

    ELSE            reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    EXCLAMATION     reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    ASTERISK        reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    FNUMBER         reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 71 (jump_statement -> RETURN SEMICOLON .)



state 78

    (72) jump_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 108



state 79

    (75) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    mult_expression shift and go to state 58
    expression      shift and go to state 109
    primary_expression shift and go to state 60
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53

state 80

    (47) unary_expression -> MINUS unary_expression .

    ASTERISK        reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    ASSIGN          reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    EQ_PLUS         reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    EQ_MINUS        reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    NOT_EQ          reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    LESS_EQ         reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    GREATER_EQ      reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 47 (unary_expression -> MINUS unary_expression .)



state 81

    (56) additive_expression -> additive_expression PLUS . mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60
    mult_expression shift and go to state 110

state 82

    (57) additive_expression -> additive_expression MINUS . mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60
    mult_expression shift and go to state 111

state 83

    (65) string_literal -> string_literal STRING .

    STRING          reduce using rule 65 (string_literal -> string_literal STRING .)
    LPAREN          reduce using rule 65 (string_literal -> string_literal STRING .)
    LBRACKET        reduce using rule 65 (string_literal -> string_literal STRING .)
    ASTERISK        reduce using rule 65 (string_literal -> string_literal STRING .)
    DIV             reduce using rule 65 (string_literal -> string_literal STRING .)
    MODULO          reduce using rule 65 (string_literal -> string_literal STRING .)
    SEMICOLON       reduce using rule 65 (string_literal -> string_literal STRING .)
    ASSIGN          reduce using rule 65 (string_literal -> string_literal STRING .)
    EQ_PLUS         reduce using rule 65 (string_literal -> string_literal STRING .)
    EQ_MINUS        reduce using rule 65 (string_literal -> string_literal STRING .)
    EQ              reduce using rule 65 (string_literal -> string_literal STRING .)
    NOT_EQ          reduce using rule 65 (string_literal -> string_literal STRING .)
    LESS            reduce using rule 65 (string_literal -> string_literal STRING .)
    GREATER         reduce using rule 65 (string_literal -> string_literal STRING .)
    LESS_EQ         reduce using rule 65 (string_literal -> string_literal STRING .)
    GREATER_EQ      reduce using rule 65 (string_literal -> string_literal STRING .)
    PLUS            reduce using rule 65 (string_literal -> string_literal STRING .)
    MINUS           reduce using rule 65 (string_literal -> string_literal STRING .)
    RBRACKET        reduce using rule 65 (string_literal -> string_literal STRING .)
    RPAREN          reduce using rule 65 (string_literal -> string_literal STRING .)
    COMMA           reduce using rule 65 (string_literal -> string_literal STRING .)



state 84

    (43) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    primary_expression shift and go to state 60
    mult_expression shift and go to state 58
    expression      shift and go to state 112
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53

state 85

    (41) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (42) postfix_expression -> postfix_expression LPAREN . RPAREN
    (44) argument_expression_list -> . expression
    (45) argument_expression_list -> . argument_expression_list COMMA expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    RPAREN          shift and go to state 113
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    argument_expression_list shift and go to state 114
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53
    mult_expression shift and go to state 58
    expression      shift and go to state 115
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 86

    (38) relational_expression -> relational_expression LESS_EQ . additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60
    mult_expression shift and go to state 58
    additive_expression shift and go to state 116

state 87

    (37) relational_expression -> relational_expression GREATER . additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60
    mult_expression shift and go to state 58
    additive_expression shift and go to state 117

state 88

    (36) relational_expression -> relational_expression LESS . additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60
    mult_expression shift and go to state 58
    additive_expression shift and go to state 118

state 89

    (39) relational_expression -> relational_expression GREATER_EQ . additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60
    mult_expression shift and go to state 58
    additive_expression shift and go to state 119

state 90

    (76) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    expression_statement shift and go to state 120
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    mult_expression shift and go to state 58
    expression      shift and go to state 71
    primary_expression shift and go to state 60
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53

state 91

    (49) unary_expression -> ASTERISK unary_expression .

    ASTERISK        reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    DIV             reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    MODULO          reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    SEMICOLON       reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    ASSIGN          reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    EQ_PLUS         reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    EQ_MINUS        reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    EQ              reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    NOT_EQ          reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    LESS            reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    GREATER         reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    LESS_EQ         reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    GREATER_EQ      reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    PLUS            reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    MINUS           reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    RBRACKET        reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    RPAREN          reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)
    COMMA           reduce using rule 49 (unary_expression -> ASTERISK unary_expression .)



state 92

    (54) mult_expression -> mult_expression MODULO . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 121
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60

state 93

    (53) mult_expression -> mult_expression DIV . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 122
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60

state 94

    (52) mult_expression -> mult_expression ASTERISK . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 123
    postfix_expression shift and go to state 52
    primary_expression shift and go to state 60

state 95

    (50) unary_expression -> AMPERSAND unary_expression .

    ASTERISK        reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    DIV             reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    MODULO          reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    SEMICOLON       reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    ASSIGN          reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    EQ_PLUS         reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    EQ_MINUS        reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    EQ              reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    NOT_EQ          reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    LESS            reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    GREATER         reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    LESS_EQ         reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    GREATER_EQ      reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    PLUS            reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    RBRACKET        reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)
    COMMA           reduce using rule 50 (unary_expression -> AMPERSAND unary_expression .)



state 96

    (63) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 124



state 97

    (30) expression -> equality_expression EQ_PLUS . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53
    mult_expression shift and go to state 58
    expression      shift and go to state 125
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 98

    (31) expression -> equality_expression EQ_MINUS . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53
    mult_expression shift and go to state 58
    expression      shift and go to state 126
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 99

    (34) equality_expression -> equality_expression NOT_EQ . relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    relational_expression shift and go to state 127
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 100

    (33) equality_expression -> equality_expression EQ . relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    relational_expression shift and go to state 128
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 101

    (29) expression -> equality_expression ASSIGN . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    relational_expression shift and go to state 53
    mult_expression shift and go to state 58
    expression      shift and go to state 129
    additive_expression shift and go to state 48
    primary_expression shift and go to state 60

state 102

    (77) selection_statement -> IF LPAREN . expression RPAREN statement
    (78) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    mult_expression shift and go to state 58
    expression      shift and go to state 130
    primary_expression shift and go to state 60
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53

state 103

    (73) jump_statement -> BREAK SEMICOLON .

    ELSE            reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    EXCLAMATION     reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    ASTERISK        reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    INUMBER         reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    FNUMBER         reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 73 (jump_statement -> BREAK SEMICOLON .)



state 104

    (74) jump_statement -> CONTINUE SEMICOLON .

    ELSE            reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    EXCLAMATION     reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    ASTERISK        reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    AMPERSAND       reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    INUMBER         reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    FNUMBER         reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 74 (jump_statement -> CONTINUE SEMICOLON .)



state 105

    (80) statement_list -> statement_list statement .

    RBRACE          reduce using rule 80 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 80 (statement_list -> statement_list statement .)
    IF              reduce using rule 80 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 80 (statement_list -> statement_list statement .)
    FOR             reduce using rule 80 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 80 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 80 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 80 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 80 (statement_list -> statement_list statement .)
    EXCLAMATION     reduce using rule 80 (statement_list -> statement_list statement .)
    ASTERISK        reduce using rule 80 (statement_list -> statement_list statement .)
    AMPERSAND       reduce using rule 80 (statement_list -> statement_list statement .)
    ID              reduce using rule 80 (statement_list -> statement_list statement .)
    INUMBER         reduce using rule 80 (statement_list -> statement_list statement .)
    FNUMBER         reduce using rule 80 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 80 (statement_list -> statement_list statement .)
    STRING          reduce using rule 80 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 80 (statement_list -> statement_list statement .)



state 106

    (25) compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .

    $               reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    INT             reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CHAR            reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    STATIC          reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    EXTERN          reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ELSE            reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    RBRACE          reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LBRACE          reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    IF              reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    WHILE           reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FOR             reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    RETURN          reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    BREAK           reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CONTINUE        reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    MINUS           reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    EXCLAMATION     reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ASTERISK        reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    AMPERSAND       reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    ID              reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    INUMBER         reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    FNUMBER         reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    CHARACTER       reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    STRING          reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)
    LPAREN          reduce using rule 25 (compound_statement -> LBRACE declaration_list_opt statement_list RBRACE .)



state 107

    (27) expression_statement -> expression SEMICOLON .

    MINUS           reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    ASTERISK        reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    AMPERSAND       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    INUMBER         reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    FNUMBER         reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 27 (expression_statement -> expression SEMICOLON .)



state 108

    (72) jump_statement -> RETURN expression SEMICOLON .

    ELSE            reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    EXCLAMATION     reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    ASTERISK        reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    AMPERSAND       reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    FNUMBER         reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 72 (jump_statement -> RETURN expression SEMICOLON .)



state 109

    (75) iteration_statement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 131



state 110

    (56) additive_expression -> additive_expression PLUS mult_expression .
    (52) mult_expression -> mult_expression . ASTERISK unary_expression
    (53) mult_expression -> mult_expression . DIV unary_expression
    (54) mult_expression -> mult_expression . MODULO unary_expression

    SEMICOLON       reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    ASSIGN          reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    EQ_PLUS         reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    EQ_MINUS        reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    EQ              reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    NOT_EQ          reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    LESS            reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    GREATER         reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    LESS_EQ         reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    GREATER_EQ      reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    PLUS            reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    MINUS           reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    RBRACKET        reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    RPAREN          reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    COMMA           reduce using rule 56 (additive_expression -> additive_expression PLUS mult_expression .)
    ASTERISK        shift and go to state 94
    DIV             shift and go to state 93
    MODULO          shift and go to state 92



state 111

    (57) additive_expression -> additive_expression MINUS mult_expression .
    (52) mult_expression -> mult_expression . ASTERISK unary_expression
    (53) mult_expression -> mult_expression . DIV unary_expression
    (54) mult_expression -> mult_expression . MODULO unary_expression

    SEMICOLON       reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    ASSIGN          reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    EQ_PLUS         reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    EQ_MINUS        reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    EQ              reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    NOT_EQ          reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    LESS            reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    GREATER         reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    LESS_EQ         reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    GREATER_EQ      reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    PLUS            reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    MINUS           reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    RBRACKET        reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    RPAREN          reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    COMMA           reduce using rule 57 (additive_expression -> additive_expression MINUS mult_expression .)
    ASTERISK        shift and go to state 94
    DIV             shift and go to state 93
    MODULO          shift and go to state 92



state 112

    (43) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 132



state 113

    (42) postfix_expression -> postfix_expression LPAREN RPAREN .

    LPAREN          reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACKET        reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASTERISK        reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV             reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODULO          reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_PLUS         reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_MINUS        reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT_EQ          reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS            reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER         reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS_EQ         reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 42 (postfix_expression -> postfix_expression LPAREN RPAREN .)



state 114

    (41) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (45) argument_expression_list -> argument_expression_list . COMMA expression

    RPAREN          shift and go to state 133
    COMMA           shift and go to state 134



state 115

    (44) argument_expression_list -> expression .

    RPAREN          reduce using rule 44 (argument_expression_list -> expression .)
    COMMA           reduce using rule 44 (argument_expression_list -> expression .)



state 116

    (38) relational_expression -> relational_expression LESS_EQ additive_expression .
    (56) additive_expression -> additive_expression . PLUS mult_expression
    (57) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    ASSIGN          reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ_PLUS         reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ_MINUS        reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ              reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    NOT_EQ          reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    LESS            reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    GREATER         reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    LESS_EQ         reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    GREATER_EQ      reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    RBRACKET        reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    RPAREN          reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    COMMA           reduce using rule 38 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82



state 117

    (37) relational_expression -> relational_expression GREATER additive_expression .
    (56) additive_expression -> additive_expression . PLUS mult_expression
    (57) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    ASSIGN          reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ_PLUS         reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ_MINUS        reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ              reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    NOT_EQ          reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    LESS            reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    GREATER         reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    LESS_EQ         reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    GREATER_EQ      reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    RBRACKET        reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    RPAREN          reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    COMMA           reduce using rule 37 (relational_expression -> relational_expression GREATER additive_expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82



state 118

    (36) relational_expression -> relational_expression LESS additive_expression .
    (56) additive_expression -> additive_expression . PLUS mult_expression
    (57) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    ASSIGN          reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    EQ_PLUS         reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    EQ_MINUS        reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    EQ              reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    NOT_EQ          reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    LESS            reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    GREATER         reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    LESS_EQ         reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    GREATER_EQ      reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    RBRACKET        reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    RPAREN          reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    COMMA           reduce using rule 36 (relational_expression -> relational_expression LESS additive_expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82



state 119

    (39) relational_expression -> relational_expression GREATER_EQ additive_expression .
    (56) additive_expression -> additive_expression . PLUS mult_expression
    (57) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    ASSIGN          reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ_PLUS         reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ_MINUS        reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ              reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    NOT_EQ          reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    LESS            reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    GREATER         reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    LESS_EQ         reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    GREATER_EQ      reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    RBRACKET        reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    RPAREN          reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    COMMA           reduce using rule 39 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82



state 120

    (76) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    expression_statement shift and go to state 135
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    mult_expression shift and go to state 58
    expression      shift and go to state 71
    primary_expression shift and go to state 60
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53

state 121

    (54) mult_expression -> mult_expression MODULO unary_expression .

    ASTERISK        reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    DIV             reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    MODULO          reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    SEMICOLON       reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    ASSIGN          reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    EQ_PLUS         reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    EQ_MINUS        reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    EQ              reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    NOT_EQ          reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    LESS            reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    GREATER         reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    LESS_EQ         reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    GREATER_EQ      reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    PLUS            reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    MINUS           reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    RBRACKET        reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    RPAREN          reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)
    COMMA           reduce using rule 54 (mult_expression -> mult_expression MODULO unary_expression .)



state 122

    (53) mult_expression -> mult_expression DIV unary_expression .

    ASTERISK        reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    DIV             reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    MODULO          reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    ASSIGN          reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    EQ_PLUS         reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    EQ_MINUS        reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    EQ              reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    NOT_EQ          reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    LESS            reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    GREATER         reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    LESS_EQ         reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    GREATER_EQ      reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    PLUS            reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    MINUS           reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    RBRACKET        reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    RPAREN          reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)
    COMMA           reduce using rule 53 (mult_expression -> mult_expression DIV unary_expression .)



state 123

    (52) mult_expression -> mult_expression ASTERISK unary_expression .

    ASTERISK        reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    DIV             reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    MODULO          reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    SEMICOLON       reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    ASSIGN          reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    EQ_PLUS         reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    EQ_MINUS        reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    EQ              reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    NOT_EQ          reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    LESS            reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    GREATER         reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    LESS_EQ         reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    GREATER_EQ      reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    PLUS            reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    MINUS           reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    RBRACKET        reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    RPAREN          reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)
    COMMA           reduce using rule 52 (mult_expression -> mult_expression ASTERISK unary_expression .)



state 124

    (63) primary_expression -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)



state 125

    (30) expression -> equality_expression EQ_PLUS expression .

    SEMICOLON       reduce using rule 30 (expression -> equality_expression EQ_PLUS expression .)
    RBRACKET        reduce using rule 30 (expression -> equality_expression EQ_PLUS expression .)
    RPAREN          reduce using rule 30 (expression -> equality_expression EQ_PLUS expression .)
    COMMA           reduce using rule 30 (expression -> equality_expression EQ_PLUS expression .)



state 126

    (31) expression -> equality_expression EQ_MINUS expression .

    SEMICOLON       reduce using rule 31 (expression -> equality_expression EQ_MINUS expression .)
    RBRACKET        reduce using rule 31 (expression -> equality_expression EQ_MINUS expression .)
    RPAREN          reduce using rule 31 (expression -> equality_expression EQ_MINUS expression .)
    COMMA           reduce using rule 31 (expression -> equality_expression EQ_MINUS expression .)



state 127

    (34) equality_expression -> equality_expression NOT_EQ relational_expression .
    (36) relational_expression -> relational_expression . LESS additive_expression
    (37) relational_expression -> relational_expression . GREATER additive_expression
    (38) relational_expression -> relational_expression . LESS_EQ additive_expression
    (39) relational_expression -> relational_expression . GREATER_EQ additive_expression

    SEMICOLON       reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    ASSIGN          reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ_PLUS         reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ_MINUS        reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ              reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT_EQ          reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RBRACKET        reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RPAREN          reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COMMA           reduce using rule 34 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LESS            shift and go to state 88
    GREATER         shift and go to state 87
    LESS_EQ         shift and go to state 86
    GREATER_EQ      shift and go to state 89



state 128

    (33) equality_expression -> equality_expression EQ relational_expression .
    (36) relational_expression -> relational_expression . LESS additive_expression
    (37) relational_expression -> relational_expression . GREATER additive_expression
    (38) relational_expression -> relational_expression . LESS_EQ additive_expression
    (39) relational_expression -> relational_expression . GREATER_EQ additive_expression

    SEMICOLON       reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    ASSIGN          reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    EQ_PLUS         reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    EQ_MINUS        reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    EQ              reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    NOT_EQ          reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 33 (equality_expression -> equality_expression EQ relational_expression .)
    LESS            shift and go to state 88
    GREATER         shift and go to state 87
    LESS_EQ         shift and go to state 86
    GREATER_EQ      shift and go to state 89



state 129

    (29) expression -> equality_expression ASSIGN expression .

    SEMICOLON       reduce using rule 29 (expression -> equality_expression ASSIGN expression .)
    RBRACKET        reduce using rule 29 (expression -> equality_expression ASSIGN expression .)
    RPAREN          reduce using rule 29 (expression -> equality_expression ASSIGN expression .)
    COMMA           reduce using rule 29 (expression -> equality_expression ASSIGN expression .)



state 130

    (77) selection_statement -> IF LPAREN expression . RPAREN statement
    (78) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 136

  ! RPAREN          [ shift and go to state 136 ]


state 131

    (75) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (66) statement -> . compound_statement
    (67) statement -> . expression_statement
    (68) statement -> . selection_statement
    (69) statement -> . iteration_statement
    (70) statement -> . jump_statement
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (27) expression_statement -> . expression SEMICOLON
    (77) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (75) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (76) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (71) jump_statement -> . RETURN SEMICOLON
    (72) jump_statement -> . RETURN expression SEMICOLON
    (73) jump_statement -> . BREAK SEMICOLON
    (74) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    LBRACE          shift and go to state 21
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 56
    RETURN          shift and go to state 41
    BREAK           shift and go to state 68
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45

  ! LBRACE          [ shift and go to state 21 ]
  ! IF              [ shift and go to state 64 ]
  ! RETURN          [ shift and go to state 41 ]

    expression_statement shift and go to state 39
    jump_statement  shift and go to state 65
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    compound_statement shift and go to state 50
    expression      shift and go to state 71
    selection_statement shift and go to state 51
    postfix_expression shift and go to state 52
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53
    statement       shift and go to state 137
    iteration_statement shift and go to state 46
    equality_expression shift and go to state 63
    primary_expression shift and go to state 60

state 132

    (43) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LPAREN          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASTERISK        reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESS            reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 43 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)



state 133

    (41) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LPAREN          reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LBRACKET        reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ASTERISK        reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV             reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODULO          reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ASSIGN          reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_PLUS         reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_MINUS        reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOT_EQ          reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS            reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER         reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS_EQ         reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER_EQ      reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 41 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)



state 134

    (45) argument_expression_list -> argument_expression_list COMMA . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    primary_expression shift and go to state 60
    mult_expression shift and go to state 58
    expression      shift and go to state 138
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53

state 135

    (76) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45


    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    postfix_expression shift and go to state 52
    equality_expression shift and go to state 63
    mult_expression shift and go to state 58
    expression      shift and go to state 139
    primary_expression shift and go to state 60
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53

state 136

    (77) selection_statement -> IF LPAREN expression RPAREN . statement
    (78) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (66) statement -> . compound_statement
    (67) statement -> . expression_statement
    (68) statement -> . selection_statement
    (69) statement -> . iteration_statement
    (70) statement -> . jump_statement
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (27) expression_statement -> . expression SEMICOLON
    (77) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (75) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (76) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (71) jump_statement -> . RETURN SEMICOLON
    (72) jump_statement -> . RETURN expression SEMICOLON
    (73) jump_statement -> . BREAK SEMICOLON
    (74) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    LBRACE          shift and go to state 21
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 56
    RETURN          shift and go to state 41
    BREAK           shift and go to state 68
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45

  ! LBRACE          [ shift and go to state 21 ]
  ! IF              [ shift and go to state 64 ]
  ! RETURN          [ shift and go to state 41 ]

    expression_statement shift and go to state 39
    jump_statement  shift and go to state 65
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    compound_statement shift and go to state 50
    expression      shift and go to state 71
    selection_statement shift and go to state 51
    postfix_expression shift and go to state 52
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53
    statement       shift and go to state 140
    iteration_statement shift and go to state 46
    equality_expression shift and go to state 63
    primary_expression shift and go to state 60

state 137

    (75) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    ELSE            reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASTERISK        reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AMPERSAND       reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 75 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)



state 138

    (45) argument_expression_list -> argument_expression_list COMMA expression .

    RPAREN          reduce using rule 45 (argument_expression_list -> argument_expression_list COMMA expression .)
    COMMA           reduce using rule 45 (argument_expression_list -> argument_expression_list COMMA expression .)



state 139

    (76) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement

    RPAREN          shift and go to state 141



state 140

    (77) selection_statement -> IF LPAREN expression RPAREN statement .
    (78) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

    RBRACE          reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASTERISK        reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AMPERSAND       reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 142

  ! ELSE            [ reduce using rule 77 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 141

    (76) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (66) statement -> . compound_statement
    (67) statement -> . expression_statement
    (68) statement -> . selection_statement
    (69) statement -> . iteration_statement
    (70) statement -> . jump_statement
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (27) expression_statement -> . expression SEMICOLON
    (77) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (75) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (76) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (71) jump_statement -> . RETURN SEMICOLON
    (72) jump_statement -> . RETURN expression SEMICOLON
    (73) jump_statement -> . BREAK SEMICOLON
    (74) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    LBRACE          shift and go to state 21
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 56
    RETURN          shift and go to state 41
    BREAK           shift and go to state 68
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45

  ! LBRACE          [ shift and go to state 21 ]
  ! IF              [ shift and go to state 64 ]
  ! RETURN          [ shift and go to state 41 ]

    expression_statement shift and go to state 39
    jump_statement  shift and go to state 65
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    compound_statement shift and go to state 50
    expression      shift and go to state 71
    selection_statement shift and go to state 51
    postfix_expression shift and go to state 52
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53
    statement       shift and go to state 143
    iteration_statement shift and go to state 46
    equality_expression shift and go to state 63
    primary_expression shift and go to state 60

state 142

    (78) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (66) statement -> . compound_statement
    (67) statement -> . expression_statement
    (68) statement -> . selection_statement
    (69) statement -> . iteration_statement
    (70) statement -> . jump_statement
    (25) compound_statement -> . LBRACE declaration_list_opt statement_list RBRACE
    (26) compound_statement -> . LBRACE declaration_list_opt RBRACE
    (27) expression_statement -> . expression SEMICOLON
    (77) selection_statement -> . IF LPAREN expression RPAREN statement
    (78) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (75) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (76) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (71) jump_statement -> . RETURN SEMICOLON
    (72) jump_statement -> . RETURN expression SEMICOLON
    (73) jump_statement -> . BREAK SEMICOLON
    (74) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression ASSIGN expression
    (30) expression -> . equality_expression EQ_PLUS expression
    (31) expression -> . equality_expression EQ_MINUS expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ relational_expression
    (34) equality_expression -> . equality_expression NOT_EQ relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression LESS additive_expression
    (37) relational_expression -> . relational_expression GREATER additive_expression
    (38) relational_expression -> . relational_expression LESS_EQ additive_expression
    (39) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (55) additive_expression -> . mult_expression
    (56) additive_expression -> . additive_expression PLUS mult_expression
    (57) additive_expression -> . additive_expression MINUS mult_expression
    (51) mult_expression -> . unary_expression
    (52) mult_expression -> . mult_expression ASTERISK unary_expression
    (53) mult_expression -> . mult_expression DIV unary_expression
    (54) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . EXCLAMATION unary_expression
    (49) unary_expression -> . ASTERISK unary_expression
    (50) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (42) postfix_expression -> . postfix_expression LPAREN RPAREN
    (43) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (58) primary_expression -> . ID
    (59) primary_expression -> . INUMBER
    (60) primary_expression -> . FNUMBER
    (61) primary_expression -> . CHARACTER
    (62) primary_expression -> . string_literal
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) string_literal -> . STRING
    (65) string_literal -> . string_literal STRING

    LBRACE          shift and go to state 21
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 56
    RETURN          shift and go to state 41
    BREAK           shift and go to state 68
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    EXCLAMATION     shift and go to state 40
    ASTERISK        shift and go to state 57
    AMPERSAND       shift and go to state 59
    ID              shift and go to state 62
    INUMBER         shift and go to state 67
    FNUMBER         shift and go to state 66
    CHARACTER       shift and go to state 43
    LPAREN          shift and go to state 61
    STRING          shift and go to state 45

  ! LBRACE          [ shift and go to state 21 ]
  ! IF              [ shift and go to state 64 ]
  ! RETURN          [ shift and go to state 41 ]

    expression_statement shift and go to state 39
    jump_statement  shift and go to state 65
    string_literal  shift and go to state 49
    unary_expression shift and go to state 42
    compound_statement shift and go to state 50
    expression      shift and go to state 71
    selection_statement shift and go to state 51
    postfix_expression shift and go to state 52
    mult_expression shift and go to state 58
    additive_expression shift and go to state 48
    relational_expression shift and go to state 53
    statement       shift and go to state 144
    iteration_statement shift and go to state 46
    equality_expression shift and go to state 63
    primary_expression shift and go to state 60

state 143

    (76) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    ELSE            reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RBRACE          reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXCLAMATION     reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ASTERISK        reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AMPERSAND       reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INUMBER         reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FNUMBER         reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHARACTER       reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING          reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 76 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)



state 144

    (78) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    ELSE            reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXCLAMATION     reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASTERISK        reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMPERSAND       reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INUMBER         reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FNUMBER         reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHARACTER       reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 78 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


