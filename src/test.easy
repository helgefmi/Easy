def Void test_functions4 do
    printf("SUCCESS")
end

def Void test_functions3 do
    test_functions4()
end

def Void test_functions2 do
    test_functions3()
end

def Void test_functions do
    printf("Trying to reach test_functions4.. ")
    test_functions2()
    puts("")
end

def Void test_if do
    if atoi("0") then
        puts("ERROR. 0")
    else
        puts("OK. 0")
    end

    if atoi("1") then
        puts("OK. 1")
    else
        puts("ERROR. 1")
    end

    if (atoi("991") * 5) < 25 then
        puts("ERROR. 5 * 5 < 25")
    else
        puts("OK. 5 * 5 < 25")
    end
end

def Void test_compare do
    if atoi("1") < 2 then
        puts("OK. 1 < 2")
    else
        puts("ERROR. 1 < 2")
    end

    if atoi("1") > 2 then
        puts("ERROR. 1 > 2")
    else
        puts("OK. 1 > 2")
    end

    if atoi("2") > 2 then
        puts("ERROR. 2 > 2")
    else
        puts("OK. 2 > 2")
    end

    if atoi("2") >= 2 then
        puts("OK. 2 >= 2")
    else
        puts("ERROR. 2 >= 2")
    end

    if atoi("55") == 55 then
        puts("OK. 55 == 55")
    else
        puts("ERROR. 55 == 55")
    end

    if atoi("66") != 66 then
        puts("ERROR. 66 != 66")
    else
        puts("OK. 66 != 66")
    end
end

def Void test_arithmetic do
    printf("50 + 8 = %d\n" (atoi("50") + 8))
    printf("50 * 8 = %d\n" (atoi("50") * 8))
    printf("50 - 8 = %d\n" (atoi("50") - 8))
end

def Void test_binop do
    puts("test_compare()")
    test_compare()

    puts("test_arithmetic()")
    test_arithmetic()
end

def Void test_constant_folding do
    printf("5 * 5 = %d\n" (5 * 5))
    printf("9 > 5 = %d\n" (9 > 5))
    printf("9 <= 5 = %d\n" (9 <= 5))
end

def Void print_hex(Number a Number b String c) do
    printf("0x%X, 0x%X, %s!\n" a b c)
end

def Void test_function_arguments do
    puts("0x1234567, 0xDEADB0B, bake kake?")
    print_hex(19088743 233495307 "bake kake")
    puts("0x13579BD, 0x2468ACE, kakemums?")
    print_hex(20281789 38177486 "kakemums")
end

def Void just_return do
    return (1337 + atoi("1") - 1)
end

def Void test_return do
    printf("1337 = %d\n" just_return())
end

def Void count(Number n) do
    if n > 1 then
        count(n - 1)
    end
    printf("%d.. " n)
end

def Number nfac(Number n) do
    if n <= 1 then
        return 1
    else
        return n * nfac(n - 1)
    end
end

def Number nfac_tail(Number n Number k) do
    if n <= 1 then
        return k
    else
        return nfac_tail((n - 1) (k * n))
    end
end

def Number fib(Number n) do
    if n <= 0 then return 0 end
    if n == 1 then return 1 end
    return fib(n - 2) + fib(n - 1)
end

def Number hanoi(Number n) do
    if n == 1 then
        return 2
    end
    return hanoi(n - 1) + hanoi(n - 1)
end

def Void test_useful_stuff do
    puts("count(4)")
    count(4)
    puts("")

    puts("nfac(11) = 39916800")
    printf("%d\n" nfac(11))

    puts("nfac_tail(11) = 39916800")
    printf("%d\n" nfac_tail(11 1))

    puts("fib(39) = 63245986")
    printf("%d\n" fib(39))

    puts("hanoi(25) = 33554431")
    printf("%d\n" (hanoi(25) - 1))
end

def Void test do
    puts("test_functions()")
    test_functions()

    puts("\ntest_if()")
    test_if()

    puts("\ntest_binop()")
    test_binop()

    puts("\ntest_constant_folding()")
    test_constant_folding()

    puts("\ntest_function_arguments()")
    test_function_arguments()

    puts("\ntest_return()")
    test_return()

    puts("\ntest_useful_stuff()")
    test_useful_stuff()
end

def Void main do
    test()
end
